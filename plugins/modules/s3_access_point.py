#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright: (c) 2022, Ansible Project
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# template: header.j2
# This module is autogenerated using the ansible.content_builder.
# See: https://github.com/ansible-community/ansible.content_builder


DOCUMENTATION = r"""
module: s3_access_point
short_description: Create and manage Amazon S3 access points to use to access S3 buckets
description:
- Create and manage Amazon S3 access points to use to access S3 buckets.
options:
    bucket:
        aliases:
        - Bucket
        description:
        - The name of the bucket that you want to associate this Access Point with.
        type: str
    bucket_account_id:
        aliases:
        - BucketAccountId
        description:
        - The AWS account ID associated with the S3 bucket associated with this access
            point.
        type: str
    force:
        default: false
        description:
        - Cancel IN_PROGRESS and PENDING resource requestes.
        - Because you can only perform a single operation on a given resource at a
            time, there might be cases where you need to cancel the current resource
            operation to make the resource available so that another operation may
            be performed on it.
        type: bool
    name:
        aliases:
        - Name
        description:
        - The name you want to assign to this Access Point.
        - If you dont specify a name, AWS CloudFormation generates a unique ID and
            uses that ID for the access point name.
        type: str
    policy:
        aliases:
        - Policy
        description:
        - The Access Point Policy you want to apply to this access point.
        type: dict
    public_access_block_configuration:
        aliases:
        - PublicAccessBlockConfiguration
        description:
        - The PublicAccessBlock configuration that you want to apply to this Access
            Point.
        - You can enable the configuration options in any combination.
        - For more information about when Amazon S3 considers a bucket or object public,
            see U(https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status)
            The Meaning of Public in the Amazon Simple Storage Service Developer Guide.
        suboptions:
            block_public_acls:
                aliases:
                - BlockPublicAcls
                description:
                - Specifies whether Amazon S3 should block public access control lists
                    (ACLs) for buckets in this account.
                - Setting this element to C(True) causes the following behavior:.
                - '- PUT Bucket acl and PUT Object acl calls fail if the specified
                    ACL is public.'
                - '- PUT Object calls fail if the request includes a public ACL.'
                - . - PUT Bucket calls fail if the request includes a public ACL.
                - Enabling this setting doesnt affect existing policies or ACLs.
                type: bool
            block_public_policy:
                aliases:
                - BlockPublicPolicy
                description:
                - Specifies whether Amazon S3 should block public bucket policies
                    for buckets in this account.
                - Setting this element to C(True) causes Amazon S3 to reject calls
                    to PUT Bucket policy if the specified bucket policy allows public
                    access.
                - Enabling this setting doesnt affect existing bucket policies.
                type: bool
            ignore_public_acls:
                aliases:
                - IgnorePublicAcls
                description:
                - Specifies whether Amazon S3 should ignore public ACLs for buckets
                    in this account.
                - Setting this element to C(True) causes Amazon S3 to ignore all public
                    ACLs on buckets in this account and any objects that they contain.
                - Enabling this setting doesnt affect the persistence of any existing
                    ACLs and doesnt prevent new public ACLs from being set.
                type: bool
            restrict_public_buckets:
                aliases:
                - RestrictPublicBuckets
                description:
                - Specifies whether Amazon S3 should restrict public bucket policies
                    for this bucket.
                - Setting this element to C(True) restricts access to this bucket
                    to only AWS services and authorized users within this account
                    if the bucket has a public policy.
                - Enabling this setting doesnt affect previously stored bucket policies,
                    except that public and cross-account access within any public
                    bucket policy, including non-public delegation to specific accounts,
                    is blocked.
                type: bool
        type: dict
    state:
        choices:
        - present
        - absent
        - list
        - describe
        - get
        default: present
        description:
        - Goal state for resource.
        - I(state=present) creates the resource if it doesn't exist, or updates to
            the provided state if the resource already exists.
        - I(state=absent) ensures an existing instance is deleted.
        - I(state=list) get all the existing resources.
        - I(state=describe) or I(state=get) retrieves information on an existing resource.
        type: str
    vpc_configuration:
        aliases:
        - VpcConfiguration
        description:
        - If you include this field, Amazon S3 restricts access to this Access Point
            to requests from the specified Virtual Private Cloud (VPC).The Virtual
            Private Cloud (VPC) configuration for a bucket access point.
        suboptions:
            vpc_id:
                aliases:
                - VpcId
                description:
                - If this field is specified, this access point will only allow connections
                    from the specified VPC ID.
                type: str
        type: dict
    wait:
        default: false
        description:
        - Wait for operation to complete before returning.
        type: bool
    wait_timeout:
        default: 320
        description:
        - How many seconds to wait for an operation to complete before timing out.
        type: int
author: Ansible Cloud Team (@ansible-collections)
version_added: 0.1.0
extends_documentation_fragment:
- amazon.aws.aws
- amazon.aws.ec2
- amazon.cloud.boto3
"""

EXAMPLES = r"""
"""

RETURN = r"""
result:
    description:
        - When I(state=list), it is a list containing dictionaries of resource information.
        - Otherwise, it is a dictionary of resource information.
        - When I(state=absent), it is an empty dictionary.
    returned: always
    type: complex
    contains:
        identifier:
            description: The unique identifier of the resource.
            type: str
        properties:
            description: The resource properties.
            type: dict
"""


from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    AnsibleAmazonCloudModule,
)
from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    CloudControlResource,
)
from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    ansible_dict_to_boto3_tag_list,
)
from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    scrub_none_parameters,
)
from ansible_collections.amazon.cloud.plugins.module_utils.core import map_key_to_alias


def main():
    argument_spec = dict(
        state=dict(
            type="str",
            choices=["present", "absent", "list", "describe", "get"],
            default="present",
        ),
    )

    argument_spec["name"] = {"type": "str", "aliases": ["Name"]}
    argument_spec["bucket"] = {"type": "str", "aliases": ["Bucket"]}
    argument_spec["bucket_account_id"] = {"type": "str", "aliases": ["BucketAccountId"]}
    argument_spec["vpc_configuration"] = {
        "type": "dict",
        "options": {"vpc_id": {"type": "str", "aliases": ["VpcId"]}},
        "aliases": ["VpcConfiguration"],
    }
    argument_spec["public_access_block_configuration"] = {
        "type": "dict",
        "options": {
            "block_public_acls": {"type": "bool", "aliases": ["BlockPublicAcls"]},
            "ignore_public_acls": {"type": "bool", "aliases": ["IgnorePublicAcls"]},
            "block_public_policy": {"type": "bool", "aliases": ["BlockPublicPolicy"]},
            "restrict_public_buckets": {
                "type": "bool",
                "aliases": ["RestrictPublicBuckets"],
            },
        },
        "aliases": ["PublicAccessBlockConfiguration"],
    }
    argument_spec["policy"] = {"type": "dict", "aliases": ["Policy"]}
    argument_spec["state"] = {
        "type": "str",
        "choices": ["present", "absent", "list", "describe", "get"],
        "default": "present",
    }
    argument_spec["wait"] = {"type": "bool", "default": False}
    argument_spec["wait_timeout"] = {"type": "int", "default": 320}
    argument_spec["force"] = {"type": "bool", "default": False}

    required_if = [
        ["state", "present", ["bucket", "name"], True],
        ["state", "absent", ["name"], True],
        ["state", "get", ["name"], True],
    ]
    mutually_exclusive = []

    module = AnsibleAmazonCloudModule(
        argument_spec=argument_spec,
        required_if=required_if,
        mutually_exclusive=mutually_exclusive,
        supports_check_mode=True,
    )
    cloud = CloudControlResource(module)

    type_name = "AWS::S3::AccessPoint"

    params = {}

    params["bucket"] = module.params.get("bucket")
    params["bucket_account_id"] = module.params.get("bucket_account_id")
    params["name"] = module.params.get("name")
    params["policy"] = module.params.get("policy")
    params["public_access_block_configuration"] = module.params.get(
        "public_access_block_configuration"
    )
    params["vpc_configuration"] = module.params.get("vpc_configuration")

    # The DesiredState we pass to AWS must be a JSONArray of non-null values
    _params_to_set = scrub_none_parameters(params)

    # Only if resource is taggable
    if module.params.get("tags") is not None:
        _params_to_set["tags"] = ansible_dict_to_boto3_tag_list(module.params["tags"])

    # Use the alias from argument_spec as key and avoid snake_to_camel conversions
    params_to_set = map_key_to_alias(_params_to_set, argument_spec)

    # Ignore createOnlyProperties that can be set only during resource creation
    create_only_params = [
        "/properties/Name",
        "/properties/Bucket",
        "/properties/BucketAccountId",
        "/properties/VpcConfiguration",
    ]

    # Necessary to handle when module does not support all the states
    handlers = ["create", "read", "update", "delete", "list"]

    state = module.params.get("state")
    identifier = ["/properties/Name"]

    results = {"changed": False, "result": {}}

    if state == "list":
        if "list" not in handlers:
            module.exit_json(
                **results, msg=f"Resource type {type_name} cannot be listed."
            )
        results["result"] = cloud.list_resources(type_name, identifier)

    if state in ("describe", "get"):
        if "read" not in handlers:
            module.exit_json(
                **results, msg=f"Resource type {type_name} cannot be read."
            )
        results["result"] = cloud.get_resource(type_name, identifier)

    if state == "present":
        results = cloud.present(
            type_name, identifier, params_to_set, create_only_params
        )

    if state == "absent":
        results["changed"] |= cloud.absent(type_name, identifier)

    module.exit_json(**results)


if __name__ == "__main__":
    main()
