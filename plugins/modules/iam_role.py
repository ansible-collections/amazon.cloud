#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright: (c) 2022, Ansible Project
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# template: header.j2
# This module is autogenerated using the ansible.content_builder.
# See: https://github.com/ansible-community/ansible.content_builder


DOCUMENTATION = r"""
module: iam_role
short_description: Create and manage roles
description:
- Creates and manages new roles for your AWS account.
options:
    assume_role_policy_document:
        aliases:
        - AssumeRolePolicyDocument
        description:
        - The trust policy that is associated with this role.
        type: dict
    description:
        aliases:
        - Description
        description:
        - A description of the role that you provide.
        type: str
    force:
        default: false
        description:
        - Cancel IN_PROGRESS and PENDING resource requestes.
        - Because you can only perform a single operation on a given resource at a
            time, there might be cases where you need to cancel the current resource
            operation to make the resource available so that another operation may
            be performed on it.
        type: bool
    managed_policy_arns:
        aliases:
        - ManagedPolicyArns
        description:
        - A list of Amazon Resource Names (ARNs) of the IAM managed policies that
            you want to attach to the role.
        elements: str
        type: list
    max_session_duration:
        aliases:
        - MaxSessionDuration
        description:
        - The maximum session duration (in seconds) that you want to set for the specified
            role.
        - If you do not specify a value for this setting, the default maximum of one
            hour is applied.
        - This setting can have a value from 1 hour to 12 hours.
        type: int
    path:
        aliases:
        - Path
        description:
        - The path to the role.
        type: str
    permissions_boundary:
        aliases:
        - PermissionsBoundary
        description:
        - The ARN of the policy used to set the permissions boundary for the role.
        type: str
    policies:
        aliases:
        - Policies
        description:
        - The inline policy document that is embedded in the specified IAM role.
        elements: dict
        suboptions:
            policy_document:
                aliases:
                - PolicyDocument
                description:
                - The policy document.
                type: str
            policy_name:
                aliases:
                - PolicyName
                description:
                - The friendly name (not ARN) identifying the policy.
                type: str
        type: list
    purge_tags:
        default: true
        description:
        - Remove tags not listed in I(tags).
        type: bool
    role_name:
        aliases:
        - RoleName
        description:
        - A name for the IAM role, up to 64 characters in length.
        type: str
    state:
        choices:
        - present
        - absent
        - list
        - describe
        - get
        default: present
        description:
        - Goal state for resource.
        - I(state=present) creates the resource if it doesn't exist, or updates to
            the provided state if the resource already exists.
        - I(state=absent) ensures an existing instance is deleted.
        - I(state=list) get all the existing resources.
        - I(state=describe) or I(state=get) retrieves information on an existing resource.
        type: str
    tags:
        aliases:
        - Tags
        - resource_tags
        description:
        - A dict of tags to apply to the resource.
        - To remove all tags set I(tags={}) and I(purge_tags=true).
        type: dict
    wait:
        default: false
        description:
        - Wait for operation to complete before returning.
        type: bool
    wait_timeout:
        default: 320
        description:
        - How many seconds to wait for an operation to complete before timing out.
        type: int
author: Ansible Cloud Team (@ansible-collections)
version_added: 0.1.0
extends_documentation_fragment:
- amazon.aws.aws
- amazon.aws.ec2
- amazon.cloud.boto3
"""

EXAMPLES = r"""
"""

RETURN = r"""
result:
    description:
        - When I(state=list), it is a list containing dictionaries of resource information.
        - Otherwise, it is a dictionary of resource information.
        - When I(state=absent), it is an empty dictionary.
    returned: always
    type: complex
    contains:
        identifier:
            description: The unique identifier of the resource.
            type: str
        properties:
            description: The resource properties.
            type: dict
"""


from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    AnsibleAmazonCloudModule,
)
from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    CloudControlResource,
)
from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    ansible_dict_to_boto3_tag_list,
)
from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    scrub_none_parameters,
)
from ansible_collections.amazon.cloud.plugins.module_utils.core import map_key_to_alias


def main():
    argument_spec = dict(
        state=dict(
            type="str",
            choices=["present", "absent", "list", "describe", "get"],
            default="present",
        ),
    )

    argument_spec["assume_role_policy_document"] = {
        "type": "dict",
        "aliases": ["AssumeRolePolicyDocument"],
    }
    argument_spec["description"] = {"type": "str", "aliases": ["Description"]}
    argument_spec["managed_policy_arns"] = {
        "type": "list",
        "elements": "str",
        "aliases": ["ManagedPolicyArns"],
    }
    argument_spec["max_session_duration"] = {
        "type": "int",
        "aliases": ["MaxSessionDuration"],
    }
    argument_spec["path"] = {"type": "str", "aliases": ["Path"]}
    argument_spec["permissions_boundary"] = {
        "type": "str",
        "aliases": ["PermissionsBoundary"],
    }
    argument_spec["policies"] = {
        "type": "list",
        "elements": "dict",
        "options": {
            "policy_document": {"type": "str", "aliases": ["PolicyDocument"]},
            "policy_name": {"type": "str", "aliases": ["PolicyName"]},
        },
        "aliases": ["Policies"],
    }
    argument_spec["role_name"] = {"type": "str", "aliases": ["RoleName"]}
    argument_spec["tags"] = {"type": "dict", "aliases": ["Tags", "resource_tags"]}
    argument_spec["state"] = {
        "type": "str",
        "choices": ["present", "absent", "list", "describe", "get"],
        "default": "present",
    }
    argument_spec["wait"] = {"type": "bool", "default": False}
    argument_spec["wait_timeout"] = {"type": "int", "default": 320}
    argument_spec["force"] = {"type": "bool", "default": False}
    argument_spec["purge_tags"] = {"type": "bool", "default": True}

    required_if = [
        ["state", "present", ["assume_role_policy_document", "role_name"], True],
        ["state", "absent", ["role_name"], True],
        ["state", "get", ["role_name"], True],
    ]
    mutually_exclusive = []

    module = AnsibleAmazonCloudModule(
        argument_spec=argument_spec,
        required_if=required_if,
        mutually_exclusive=mutually_exclusive,
        supports_check_mode=True,
    )
    cloud = CloudControlResource(module)

    type_name = "AWS::IAM::Role"

    params = {}

    params["assume_role_policy_document"] = module.params.get(
        "assume_role_policy_document"
    )
    params["description"] = module.params.get("description")
    params["managed_policy_arns"] = module.params.get("managed_policy_arns")
    params["max_session_duration"] = module.params.get("max_session_duration")
    params["path"] = module.params.get("path")
    params["permissions_boundary"] = module.params.get("permissions_boundary")
    params["policies"] = module.params.get("policies")
    params["role_name"] = module.params.get("role_name")
    params["tags"] = module.params.get("tags")

    # The DesiredState we pass to AWS must be a JSONArray of non-null values
    _params_to_set = scrub_none_parameters(params)

    # Only if resource is taggable
    if module.params.get("tags") is not None:
        _params_to_set["tags"] = ansible_dict_to_boto3_tag_list(module.params["tags"])

    # Use the alias from argument_spec as key and avoid snake_to_camel conversions
    params_to_set = map_key_to_alias(_params_to_set, argument_spec)

    # Ignore createOnlyProperties that can be set only during resource creation
    create_only_params = ["/properties/Path", "/properties/RoleName"]

    # Necessary to handle when module does not support all the states
    handlers = ["create", "read", "update", "delete", "list"]

    state = module.params.get("state")
    identifier = ["/properties/RoleName"]

    results = {"changed": False, "result": {}}

    if state == "list":
        if "list" not in handlers:
            module.exit_json(
                **results, msg=f"Resource type {type_name} cannot be listed."
            )
        results["result"] = cloud.list_resources(type_name, identifier)

    if state in ("describe", "get"):
        if "read" not in handlers:
            module.exit_json(
                **results, msg=f"Resource type {type_name} cannot be read."
            )
        results["result"] = cloud.get_resource(type_name, identifier)

    if state == "present":
        results = cloud.present(
            type_name, identifier, params_to_set, create_only_params
        )

    if state == "absent":
        results["changed"] |= cloud.absent(type_name, identifier)

    module.exit_json(**results)


if __name__ == "__main__":
    main()
