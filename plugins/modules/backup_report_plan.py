#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright: (c) 2022, Ansible Project
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# template: header.j2
# This module is autogenerated by amazon_cloud_code_generator.
# See: https://github.com/ansible-collections/amazon_cloud_code_generator

from __future__ import absolute_import, division, print_function

__metaclass__ = type


DOCUMENTATION = r"""
module: backup_report_plan
short_description: Create and manage report plans
description: Creates and manages report plans (list, create, update, describe, delete).
options:
    purge_tags:
        default: true
        description:
        - Remove tags not listed in I(tags).
        required: false
        type: bool
    report_delivery_channel:
        description:
        - A structure that contains information about where and how to deliver your
            reports, specifically your Amazon S3 bucket name, S3 key prefix, and the
            formats of your reports.
        required: true
        suboptions:
            formats:
                description:
                - 'A list of the format of your reports: CSV, JSON, or both.'
                - If not specified, the default format is CSV.
                elements: str
                type: list
            s3_bucket_name:
                description:
                - The unique name of the S3 bucket that receives your reports.
                required: true
                type: str
            s3_key_prefix:
                description:
                - 'The prefix for where AWS Backup Audit Manager delivers your reports
                    to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name.'
                - If not specified, there is no prefix.
                type: str
        type: dict
    report_plan_arn:
        description:
        - An Amazon Resource Name (ARN) that uniquely identifies a resource.
        - The format of the ARN depends on the resource type.
        type: str
    report_plan_description:
        description:
        - An optional description of the report plan with a maximum of 1,024 characters.
        type: str
    report_plan_name:
        description:
        - The unique name of the report plan.
        - The name must be between 1 and 256 characters, starting with a letter, and
            consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).
        type: str
    report_plan_tags:
        description:
        - A key-value pair to associate with a resource.
        elements: dict
        suboptions:
            key:
                description:
                - The key name of the tag.
                - You can specify a value that is 1 to 128 Unicode characters in length
                    and cannot be prefixed with aws:.
                - 'You can use any of the following characters: the set of Unicode
                    letters, digits, whitespace, _, ., /, =, +, and -.'
                type: str
            value:
                description:
                - The value for the tag.
                - You can specify a value that is 0 to 256 Unicode characters in length
                    and cannot be prefixed with aws:.
                - 'You can use any of the following characters: the set of Unicode
                    letters, digits, whitespace, _, ., /, =, +, and -.'
                type: str
        type: list
    report_setting:
        description:
        - Identifies the report template for the report.
        - Reports are built using a report template.
        required: true
        suboptions:
            framework_arns:
                description:
                - The Amazon Resource Names (ARNs) of the frameworks a report covers.
                elements: str
                type: list
            report_template:
                description:
                - Identifies the report template for the report.
                - Reports are built using a report template.
                - 'The report templates are: `C(BACKUP_JOB_REPORT) | C(COPY_JOB_REPORT)
                    | C(RESTORE_JOB_REPORT)`'
                required: true
                type: str
        type: dict
    state:
        choices:
        - present
        - absent
        - list
        - describe
        - get
        default: present
        description:
        - Goal state for resource.
        - I(state=present) creates the resource if it doesn't exist, or updates to
            the provided state if the resource already exists.
        - I(state=absent) ensures an existing instance is deleted.
        - I(state=list) get all the existing resources.
        - I(state=describe) or I(state=get) retrieves information on an existing resource.
        type: str
    tags:
        aliases:
        - resource_tags
        description:
        - A dict of tags to apply to the resource.
        - To remove all tags set I(tags={}) and I(purge_tags=true).
        required: false
        type: dict
    wait:
        default: false
        description:
        - Wait for operation to complete before returning.
        type: bool
    wait_timeout:
        default: 320
        description:
        - How many seconds to wait for an operation to complete before timing out.
        type: int
author: Ansible Cloud Team (@ansible-collections)
version_added: 0.1.0
requirements: []
extends_documentation_fragment:
- amazon.cloud.aws
- amazon.cloud.ec2
"""

EXAMPLES = r"""
"""

RETURN = r"""
result:
    description: Dictionary containing resource information.
    returned: always
    type: complex
    contains:
        identifier:
            description: The unique identifier of the resource.
            type: str
        properties:
            description: The resource properties.
            type: dict
"""

import json

from ansible_collections.amazon.aws.plugins.module_utils.core import AnsibleAWSModule
from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    CloudControlResource,
)
from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    snake_dict_to_camel_dict,
)
from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    ansible_dict_to_boto3_tag_list,
)


def main():

    argument_spec = dict(
        state=dict(
            type="str",
            choices=["present", "absent", "list", "describe", "get"],
            default="present",
        ),
    )

    argument_spec["report_plan_name"] = {"type": "str"}
    argument_spec["report_plan_arn"] = {"type": "str"}
    argument_spec["report_plan_description"] = {"type": "str"}
    argument_spec["report_plan_tags"] = {
        "type": "list",
        "elements": "dict",
        "options": {"key": {"type": "str"}, "value": {"type": "str"}},
    }
    argument_spec["report_delivery_channel"] = {
        "type": "dict",
        "options": {
            "formats": {"type": "list", "elements": "str"},
            "s3_bucket_name": {"type": "str", "required": True},
            "s3_key_prefix": {"type": "str"},
        },
        "required": True,
    }
    argument_spec["report_setting"] = {
        "type": "dict",
        "options": {
            "report_template": {"type": "str", "required": True},
            "framework_arns": {"type": "list", "elements": "str"},
        },
        "required": True,
    }
    argument_spec["state"] = {
        "type": "str",
        "choices": ["present", "absent", "list", "describe", "get"],
        "default": "present",
    }
    argument_spec["wait"] = {"type": "bool", "default": False}
    argument_spec["wait_timeout"] = {"type": "int", "default": 320}
    argument_spec["tags"] = {
        "type": "dict",
        "required": False,
        "aliases": ["resource_tags"],
    }
    argument_spec["purge_tags"] = {"type": "bool", "required": False, "default": True}

    required_if = [
        ["state", "present", ["report_delivery_channel", "report_setting"], True],
        ["state", "absent", [], True],
        ["state", "get", [], True],
    ]

    module = AnsibleAWSModule(
        argument_spec=argument_spec, required_if=required_if, supports_check_mode=True
    )
    cloud = CloudControlResource(module)

    type_name = "AWS::Backup::ReportPlan"

    params = {}

    params["report_delivery_channel"] = module.params.get("report_delivery_channel")
    params["report_plan_arn"] = module.params.get("report_plan_arn")
    params["report_plan_description"] = module.params.get("report_plan_description")
    params["report_plan_name"] = module.params.get("report_plan_name")
    params["report_plan_tags"] = module.params.get("report_plan_tags")
    params["report_setting"] = module.params.get("report_setting")
    params["tags"] = module.params.get("tags")

    # The DesiredState we pass to AWS must be a JSONArray of non-null values
    _params_to_set = {k: v for k, v in params.items() if v is not None}

    # Only if resource is taggable
    if module.params.get("tags", None):
        _params_to_set["tags"] = ansible_dict_to_boto3_tag_list(module.params["tags"])

    params_to_set = snake_dict_to_camel_dict(_params_to_set, capitalize_first=True)

    # Ignore createOnlyProperties that can be set only during resource creation
    create_only_params = ["report_plan_name"]

    state = module.params.get("state")
    identifier = module.params.get("report_plan_arn")

    results = {"changed": False, "result": []}

    if state == "list":
        results["result"] = cloud.list_resources(type_name)

    if state in ("describe", "get"):
        results["result"] = cloud.get_resource(type_name, identifier)

    if state == "present":
        results["changed"] |= cloud.present(
            type_name, identifier, params_to_set, create_only_params
        )
        results["result"] = cloud.get_resource(type_name, identifier)

    if state == "absent":
        results["changed"] |= cloud.absent(type_name, identifier)

    module.exit_json(**results)


if __name__ == "__main__":
    main()
