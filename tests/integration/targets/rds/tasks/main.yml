- name: RDS integration tests
  collections:
    - amazon.aws
    - amazon.cloud
  module_defaults:
    group/amazon.cloud.aws:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token | default(omit) }}'
      region: '{{ aws_region }}'
    group/aws:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token | default(omit) }}'
      region: '{{ aws_region }}'

  block:
  - name: Create a VPC
    amazon.aws.ec2_vpc_net:
      name: '{{ vpc_name }}'
      state: present
      cidr_block: '{{ vpc_cidr }}'
    register: vpc_result

  - name: Assert success
    assert:
      that:
      - vpc_result is successful
      - '"vpc" in vpc_result'
      - '"cidr_block" in vpc_result.vpc'
      - vpc_result.vpc.cidr_block == vpc_cidr
      - '"id" in vpc_result.vpc'
      - vpc_result.vpc.id.startswith("vpc-")
      - '"state" in vpc_result.vpc'
      - vpc_result.vpc.state == 'available'
      - '"tags" in vpc_result.vpc'

  - name: 'Set fact: VPC ID'
    set_fact:
      vpc_id: '{{ vpc_result.vpc.id }}'

  - name: Create subnet
    amazon.aws.ec2_vpc_subnet:
      cidr: '{{ subnet_cidr}}'
      vpc_id: '{{ vpc_id }}'
      state: present
    register: subnet_result

  - name: Assert success
    assert:
      that:
      - subnet_result is successful
      - '"subnet" in subnet_result'
      - '"cidr_block" in subnet_result.subnet'
      - subnet_result.subnet.cidr_block == subnet_cidr
      - '"id" in subnet_result.subnet'
      - subnet_result.subnet.id.startswith("subnet-")
      - '"state" in subnet_result.subnet'
      - subnet_result.subnet.state == 'available'
      - '"tags" in subnet_result.subnet'
      - subnet_result.subnet.vpc_id == vpc_id

  - name: 'Set fact: VPC subnet ID'
    set_fact:
      subnet_id: '{{ subnet_result.subnet.id }}'

  - name: Create security groups
    amazon.aws.ec2_security_group:
      name: '{{ item }}'
      description: created by rds_instance integration tests
      state: present
      vpc_id: '{{ vpc_id }}'
    register: sgs_result
    loop:
    - '{{ sg_1_name }}'
    - '{{ sg_2_name }}'
    - '{{ sg_3_name }}'

  - name: Assert success
    assert:
      that:
      - sgs_result is successful

  - name: 'Set fact: security groups ID'
    set_fact:
      sg_1: '{{ sgs_result.results.0.group_id }}'
      sg_2: '{{ sgs_result.results.1.group_id }}'
      sg_3: '{{ sgs_result.results.2.group_id }}'

  # Add ignore_erros: true because it may throw ThrottlingException sometimes
  - name: List all the option groups
    amazon.cloud.rds_option_group:
      state: list
    register: option_groups_result
    ignore_errors: true

  # - name: Assert success
  #   assert:
  #     that:
  #     - option_groups_result is successful

  - name: Create an RDS Mysql option group - CHECK_MODE
    amazon.cloud.rds_option_group:
      state: present
      option_group_name: '{{ option_group_name }}'
      engine_name: '{{ engine_name }}'
      major_engine_version: '{{ major_engine_version }}'
      option_group_description: '{{ option_group_description }}'
      option_configurations:
      - option_name: MEMCACHED
        port: 11211
        vpc_security_group_memberships:
        - '{{ sg_1 }}'
        option_settings:
        - name: MAX_SIMULTANEOUS_CONNECTIONS
          value: '20'
        - name: CHUNK_SIZE_GROWTH_FACTOR
          value: '1.25'
    check_mode: true
    register: new_rds_mysql_option_group

  - name: Assert success - CHECK_MODE
    assert:
      that:
      - new_rds_mysql_option_group.changed

  - name: Create an RDS Mysql option group
    amazon.cloud.rds_option_group:
      state: present
      option_group_name: '{{ option_group_name }}'
      engine_name: '{{ engine_name }}'
      major_engine_version: '{{ major_engine_version }}'
      option_group_description: '{{ option_group_description }}'
      option_configurations:
      - option_name: MEMCACHED
        port: 11211
        vpc_security_group_memberships:
        - '{{ sg_1 }}'
        option_settings:
        - name: MAX_SIMULTANEOUS_CONNECTIONS
          value: '20'
        - name: CHUNK_SIZE_GROWTH_FACTOR
          value: '1.25'
    register: new_rds_mysql_option_group

  - assert:
      that:
      - new_rds_mysql_option_group.changed
      - "'engine_name' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.engine_name == "{{ engine_name }}"
      - "'major_engine_version' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.major_engine_version == "{{ major_engine_version}}"
      - "'identifier' in new_rds_mysql_option_group.result"
      - new_rds_mysql_option_group.result.identifier ==  "{{ option_group_name }}"
      - "'option_group_description' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.option_group_description == "{{ option_group_description }}"
      - "'option_group_name' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.option_group_name == "{{ option_group_name }}"
      - "'tags' in new_rds_mysql_option_group.result.properties"
      - (new_rds_mysql_option_group.result.properties.tags | length) == 0

  - name: Create an RDS Mysql option group (idempotency) - CHECK_MODE
    amazon.cloud.rds_option_group:
      state: present
      option_group_name: '{{ option_group_name }}'
      engine_name: '{{ engine_name }}'
      major_engine_version: '{{ major_engine_version }}'
      option_group_description: '{{ option_group_description }}'
      option_configurations:
      - option_name: MEMCACHED
        port: 11211
        vpc_security_group_memberships:
        - '{{ sg_1 }}'
        option_settings:
        - name: MAX_SIMULTANEOUS_CONNECTIONS
          value: '20'
        - name: CHUNK_SIZE_GROWTH_FACTOR
          value: '1.25'
    check_mode: true
    register: new_rds_mysql_option_group

  - name: Assert success - CHECK_MODE
    assert:
      that:
      - not new_rds_mysql_option_group.changed

  - name: Create an RDS Mysql option group (idempotency)
    amazon.cloud.rds_option_group:
      state: present
      option_group_name: '{{ option_group_name }}'
      engine_name: '{{ engine_name }}'
      major_engine_version: '{{ major_engine_version }}'
      option_group_description: '{{ option_group_description }}'
      option_configurations:
      - option_name: MEMCACHED
        port: 11211
        vpc_security_group_memberships:
        - '{{ sg_1 }}'
        option_settings:
        - name: MAX_SIMULTANEOUS_CONNECTIONS
          value: '20'
        - name: CHUNK_SIZE_GROWTH_FACTOR
          value: '1.25'
    register: new_rds_mysql_option_group

  - assert:
      that:
      - not new_rds_mysql_option_group.changed

  - name: Create an RDS Mysql option group - apply different changes (expected changed=true)
    amazon.cloud.rds_option_group:
      state: present
      option_group_name: '{{ option_group_name }}'
      engine_name: '{{ engine_name }}'
      major_engine_version: '{{ major_engine_version }}'
      option_group_description: '{{ option_group_description }}'
      option_configurations:
      - option_name: MEMCACHED
        port: 11211
        vpc_security_group_memberships:
        - '{{ sg_1 }}'
        - '{{ sg_2 }}'
        - '{{ sg_3 }}'
        option_settings:
        - name: MAX_SIMULTANEOUS_CONNECTIONS
          value: '30'
      wait: true
    register: new_rds_mysql_option_group

  - assert:
      that:
      - new_rds_mysql_option_group.changed
      - "'engine_name' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.engine_name == "{{ engine_name }}"
      - "'major_engine_version' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.major_engine_version == "{{ major_engine_version}}"
      - "'identifier' in new_rds_mysql_option_group.result"
      - new_rds_mysql_option_group.result.identifier ==  "{{ option_group_name }}"
      - "'option_group_description' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.option_group_description == "{{ option_group_description }}"
      - "'option_group_name' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.option_group_name == "{{ option_group_name }}"
      - "'tags' in new_rds_mysql_option_group.result.properties"
      - (new_rds_mysql_option_group.result.properties.tags | length) == 0
      - "'vpc_security_group_memberships' in option_settings"
      - (option_settings.vpc_security_group_memberships | length) == 3
    vars:
       option_settings: '{{ new_rds_mysql_option_group.result.properties.option_configurations[0] }}'

  - name: Get info about an option group
    amazon.cloud.rds_option_group:
      state: get
      option_group_name: '{{ option_group_name }}'
    register: option_groups_result

  - name: Assert success
    assert:
      that:
      - option_groups_result is successful
      - "'engine_name' in option_groups_result.result.properties"
      - option_groups_result.result.properties.engine_name == "{{ engine_name }}"
      - "'major_engine_version' in option_groups_result.result.properties"
      - option_groups_result.result.properties.major_engine_version == "{{ major_engine_version}}"
      - "'identifier' in option_groups_result.result"
      - option_groups_result.result.identifier ==  "{{ option_group_name }}"
      - "'option_group_description' in option_groups_result.result.properties"
      - option_groups_result.result.properties.option_group_description == "{{ option_group_description }}"
      - "'option_group_name' in option_groups_result.result.properties"
      - option_groups_result.result.properties.option_group_name == "{{ option_group_name }}"
      - "'tags' in option_groups_result.result.properties"
      - (option_groups_result.result.properties.tags | length) == 0
      - "'vpc_security_group_memberships' in option_settings"
      - (option_settings.vpc_security_group_memberships | length) == 3
    vars:
       option_settings: '{{ new_rds_mysql_option_group.result.properties.option_configurations[0] }}'

  - name: Create an RDS Mysql option group - apply same changes (expected changed=false)
    amazon.cloud.rds_option_group:
      state: present
      option_group_name: '{{ option_group_name }}'
      engine_name: '{{ engine_name }}'
      major_engine_version: '{{ major_engine_version }}'
      option_group_description: '{{ option_group_description }}'
      option_configurations:
      - option_name: MEMCACHED
        port: 11211
        vpc_security_group_memberships:
        - '{{ sg_1 }}'
        - '{{ sg_2 }}'
        - '{{ sg_3 }}'
        option_settings:
        - name: MAX_SIMULTANEOUS_CONNECTIONS
          value: '30'
      wait: true
    register: new_rds_mysql_option_group

  - name: Assert success
    assert:
      that:
      - not new_rds_mysql_option_group.changed

  - name: RDS Mysql option group - apply tags - CHECK_MODE
    amazon.cloud.rds_option_group:
      state: present
      option_group_name: '{{ option_group_name }}'
      engine_name: '{{ engine_name }}'
      major_engine_version: '{{ major_engine_version }}'
      option_group_description: '{{ option_group_description }}'
      option_configurations:
      - option_name: MEMCACHED
        port: 11211
        vpc_security_group_memberships:
        - '{{ sg_1 }}'
        - '{{ sg_2 }}'
        - '{{ sg_3 }}'
        option_settings:
        - name: CHUNK_SIZE_GROWTH_FACTOR
          value: '1.2'
      tags:
        tag_one: '{{ option_group_name }} One'
        Tag Two: two {{ option_group_name }}
    check_mode: true
    register: new_rds_mysql_option_group

  - name: Assert success - CHECK_MODE
    assert:
      that:
      - new_rds_mysql_option_group.changed

  - name: RDS Mysql option group - apply tags
    amazon.cloud.rds_option_group:
      state: present
      option_group_name: '{{ option_group_name }}'
      engine_name: '{{ engine_name }}'
      major_engine_version: '{{ major_engine_version }}'
      option_group_description: '{{ option_group_description }}'
      option_configurations:
      - option_name: MEMCACHED
        port: 11211
        vpc_security_group_memberships:
        - '{{ sg_1 }}'
        - '{{ sg_2 }}'
        - '{{ sg_3 }}'
        option_settings:
        - name: CHUNK_SIZE_GROWTH_FACTOR
          value: '1.2'
      tags:
        tag_one: '{{ option_group_name }} One'
        Tag Two: two {{ option_group_name }}
      wait: true
    register: new_rds_mysql_option_group

  - assert:
      that:
      - new_rds_mysql_option_group.changed
      - "'engine_name' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.engine_name == "{{ engine_name }}"
      - "'major_engine_version' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.major_engine_version == "{{ major_engine_version}}"
      - "'identifier' in new_rds_mysql_option_group.result"
      - new_rds_mysql_option_group.result.identifier ==  "{{ option_group_name }}"
      - "'option_group_description' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.option_group_description == "{{ option_group_description }}"
      - "'option_group_name' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.option_group_name == "{{ option_group_name }}"
      - "'tags' in new_rds_mysql_option_group.result.properties"
      - (new_rds_mysql_option_group.result.properties.tags | length) == 2
      - new_rds_mysql_option_group.result.properties.tags["tag_one"] == "{{ option_group_name }} One"
      - new_rds_mysql_option_group.result.properties.tags["Tag Two"] == "two {{ option_group_name }}"

  - name: RDS Mysql option group - apply tags (idempotency)
    amazon.cloud.rds_option_group:
      state: present
      option_group_name: '{{ option_group_name }}'
      engine_name: '{{ engine_name }}'
      major_engine_version: '{{ major_engine_version }}'
      option_group_description: '{{ option_group_description }}'
      option_configurations:
      - option_name: MEMCACHED
        port: 11211
        vpc_security_group_memberships:
        - '{{ sg_1 }}'
        - '{{ sg_2 }}'
        - '{{ sg_3 }}'
        option_settings:
        - name: CHUNK_SIZE_GROWTH_FACTOR
          value: '1.2'
      tags:
        tag_one: '{{ option_group_name }} One'
        Tag Two: two {{ option_group_name }}
    register: new_rds_mysql_option_group

  - assert:
      that:
      - not new_rds_mysql_option_group.changed

  - name: RDS Mysql option group - update tags
    amazon.cloud.rds_option_group:
      state: present
      option_group_name: '{{ option_group_name }}'
      engine_name: '{{ engine_name }}'
      major_engine_version: '{{ major_engine_version }}'
      option_group_description: '{{ option_group_description }}'
      option_configurations:
      - option_name: MEMCACHED
        port: 11211
        vpc_security_group_memberships:
        - '{{ sg_1 }}'
        - '{{ sg_2 }}'
        - '{{ sg_3 }}'
        option_settings:
        - name: CHUNK_SIZE_GROWTH_FACTOR
          value: '1.2'
      tags:
        tag_three: '{{ option_group_name }} Three'
        Tag Two: two {{ option_group_name }}
      wait: true
    register: new_rds_mysql_option_group

  - assert:
      that:
      - new_rds_mysql_option_group.changed
      - new_rds_mysql_option_group.changed
      - "'engine_name' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.engine_name == "{{ engine_name }}"
      - "'major_engine_version' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.major_engine_version == "{{ major_engine_version}}"
      - "'identifier' in new_rds_mysql_option_group.result"
      - new_rds_mysql_option_group.result.identifier ==  "{{ option_group_name }}"
      - "'option_group_description' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.option_group_description == "{{ option_group_description }}"
      - "'option_group_name' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.option_group_name == "{{ option_group_name }}"
      - "'tags' in new_rds_mysql_option_group.result.properties"
      - (new_rds_mysql_option_group.result.properties.tags | length) == 2
      - new_rds_mysql_option_group.result.properties.tags["tag_three"] == "{{ option_group_name }} Three"
      - new_rds_mysql_option_group.result.properties.tags["Tag Two"] == "two {{ option_group_name }}"

  - name: RDS Mysql option group - update tags without purge (expected changed=true)
    amazon.cloud.rds_option_group:
      state: present
      option_group_name: '{{ option_group_name }}'
      engine_name: '{{ engine_name }}'
      major_engine_version: '{{ major_engine_version }}'
      option_group_description: '{{ option_group_description }}'
      option_configurations:
      - option_name: MEMCACHED
        port: 11211
        vpc_security_group_memberships:
        - '{{ sg_1 }}'
        - '{{ sg_2 }}'
        - '{{ sg_3 }}'
        option_settings:
        - name: CHUNK_SIZE_GROWTH_FACTOR
          value: '1.2'
      purge_tags: no
      tags:
        tag_one: '{{ option_group_name }} One'
      wait: true
    register: new_rds_mysql_option_group

  - assert:
      that:
      - new_rds_mysql_option_group.changed
      - "'engine_name' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.engine_name == "{{ engine_name }}"
      - "'major_engine_version' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.major_engine_version == "{{ major_engine_version}}"
      - "'identifier' in new_rds_mysql_option_group.result"
      - new_rds_mysql_option_group.result.identifier ==  "{{ option_group_name }}"
      - "'option_group_description' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.option_group_description == "{{ option_group_description }}"
      - "'option_group_name' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.option_group_name == "{{ option_group_name }}"
      - "'tags' in new_rds_mysql_option_group.result.properties"
      - (new_rds_mysql_option_group.result.properties.tags | length) == 3
      - new_rds_mysql_option_group.result.properties.tags["Tag Two"] == "two {{ option_group_name }}"
      - new_rds_mysql_option_group.result.properties.tags["tag_one"] == "{{ option_group_name }} One"
      - new_rds_mysql_option_group.result.properties.tags["tag_three"] == "{{ option_group_name }} Three"

  - name: RDS Mysql option group - update with CamelCase tags (expected changed=true)
    amazon.cloud.rds_option_group:
      state: present
      option_group_name: '{{ option_group_name }}'
      engine_name: '{{ engine_name }}'
      major_engine_version: '{{ major_engine_version }}'
      option_group_description: '{{ option_group_description }}'
      option_configurations:
      - option_name: MEMCACHED
        port: 11211
        vpc_security_group_memberships:
        - '{{ sg_1 }}'
        - '{{ sg_2 }}'
        - '{{ sg_3 }}'
        option_settings:
        - name: CHUNK_SIZE_GROWTH_FACTOR
          value: '1.2'
      tags:
        lowercase spaced: hello cruel world
        Title Case: Hello Cruel World
        CamelCase: SimpleCamelCase
        snake_case: simple_snake_case
      wait: true
    register: new_rds_mysql_option_group

  - assert:
      that:
      - new_rds_mysql_option_group.changed
      - "'engine_name' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.engine_name == "{{ engine_name }}"
      - "'major_engine_version' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.major_engine_version == "{{ major_engine_version}}"
      - "'identifier' in new_rds_mysql_option_group.result"
      - new_rds_mysql_option_group.result.identifier ==  "{{ option_group_name }}"
      - "'option_group_description' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.option_group_description == "{{ option_group_description }}"
      - "'option_group_name' in new_rds_mysql_option_group.result.properties"
      - new_rds_mysql_option_group.result.properties.option_group_name == "{{ option_group_name }}"
      - "'tags' in new_rds_mysql_option_group.result.properties"
      - (new_rds_mysql_option_group.result.properties.tags | length) == 4
      - new_rds_mysql_option_group.result.properties.tags["lowercase spaced"] == 'hello cruel world'
      - new_rds_mysql_option_group.result.properties.tags["Title Case"] == 'Hello Cruel World'
      - new_rds_mysql_option_group.result.properties.tags["CamelCase"] == 'SimpleCamelCase'
      - new_rds_mysql_option_group.result.properties.tags["snake_case"] == 'simple_snake_case'

  - name: RDS Mysql option group - do not specify any tag to ensure previous tags
      are not removed
    amazon.cloud.rds_option_group:
      state: present
      option_group_name: '{{ option_group_name }}'
      engine_name: '{{ engine_name }}'
      major_engine_version: '{{ major_engine_version }}'
      option_group_description: '{{ option_group_description }}'
      option_configurations:
      - option_name: MEMCACHED
        port: 11211
        vpc_security_group_memberships:
        - '{{ sg_1 }}'
        - '{{ sg_2 }}'
        - '{{ sg_3 }}'
        option_settings:
        - name: CHUNK_SIZE_GROWTH_FACTOR
          value: '1.2'
    register: new_rds_mysql_option_group

  - assert:
      that:
      - not new_rds_mysql_option_group.changed

  - name: Delete an RDS Mysql option group -  CHECK_MODE
    amazon.cloud.rds_option_group:
      state: absent
      option_group_name: '{{ option_group_name }}'
    check_mode: yes
    register: deleted_rds_mysql_option_group

  - name: Assert success - CHECK_MODE
    assert:
      that:
      - deleted_rds_mysql_option_group.changed

  - name: Delete an RDS Mysql option group
    amazon.cloud.rds_option_group:
      state: absent
      option_group_name: '{{ option_group_name }}'
    register: deleted_rds_mysql_option_group

  - name: Assert success
    assert:
      that:
      - deleted_rds_mysql_option_group.changed

  always:

  - name: Delete an RDS Mysql option group
    amazon.cloud.rds_option_group:
      state: absent
      option_group_name: '{{ option_group_name }}'
    ignore_errors: true

  - name: Remove security groups
    amazon.aws.ec2_security_group:
      name: '{{ item }}'
      description: created by rds_instance integration tests
      state: absent
    register: sgs_result
    loop:
    - '{{ sg_1_name }}'
    - '{{ sg_2_name }}'
    - '{{ sg_3_name }}'
    ignore_errors: true

  - name: Remove subnet
    amazon.aws.ec2_vpc_subnet:
      cidr: '{{ subnet_cidr }}'
      vpc_id: '{{ vpc_id }}'
      state: absent
    ignore_errors: true

  - name: Delete VPC
    amazon.aws.ec2_vpc_net:
      name: '{{ vpc_name }}'
      cidr_block: '{{ vpc_cidr }}'
      state: absent
      purge_cidrs: yes
    ignore_errors: true
